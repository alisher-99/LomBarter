// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/db_repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	entity "github.com/alisher-99/LomBarter/internal/domain/entity"
	form "github.com/alisher-99/LomBarter/internal/domain/form"
	repository "github.com/alisher-99/LomBarter/internal/domain/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDataStore) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDataStoreMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataStore)(nil).Close), ctx)
}

// Connect mocks base method.
func (m *MockDataStore) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockDataStoreMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDataStore)(nil).Connect))
}

// Name mocks base method.
func (m *MockDataStore) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDataStoreMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDataStore)(nil).Name))
}

// OrdersRepository mocks base method.
func (m *MockDataStore) OrdersRepository() repository.OrdersRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersRepository")
	ret0, _ := ret[0].(repository.OrdersRepository)
	return ret0
}

// OrdersRepository indicates an expected call of OrdersRepository.
func (mr *MockDataStoreMockRecorder) OrdersRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersRepository", reflect.TypeOf((*MockDataStore)(nil).OrdersRepository))
}

// UserRepository mocks base method.
func (m *MockDataStore) UserRepository() repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepository")
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// UserRepository indicates an expected call of UserRepository.
func (mr *MockDataStoreMockRecorder) UserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepository", reflect.TypeOf((*MockDataStore)(nil).UserRepository))
}

// MockBase is a mock of Base interface.
type MockBase struct {
	ctrl     *gomock.Controller
	recorder *MockBaseMockRecorder
}

// MockBaseMockRecorder is the mock recorder for MockBase.
type MockBaseMockRecorder struct {
	mock *MockBase
}

// NewMockBase creates a new mock instance.
func NewMockBase(ctrl *gomock.Controller) *MockBase {
	mock := &MockBase{ctrl: ctrl}
	mock.recorder = &MockBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBase) EXPECT() *MockBaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBase) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBaseMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBase)(nil).Close), ctx)
}

// Connect mocks base method.
func (m *MockBase) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockBaseMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockBase)(nil).Connect))
}

// Name mocks base method.
func (m *MockBase) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBaseMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBase)(nil).Name))
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(ctx context.Context, id string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), ctx, id)
}

// GetUsersByBio mocks base method.
func (m *MockUserRepository) GetUsersByBio(ctx context.Context, filter form.UsersGetByBio) (entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByBio", ctx, filter)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByBio indicates an expected call of GetUsersByBio.
func (mr *MockUserRepositoryMockRecorder) GetUsersByBio(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByBio", reflect.TypeOf((*MockUserRepository)(nil).GetUsersByBio), ctx, filter)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user)
}

// MockOrdersRepository is a mock of OrdersRepository interface.
type MockOrdersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersRepositoryMockRecorder
}

// MockOrdersRepositoryMockRecorder is the mock recorder for MockOrdersRepository.
type MockOrdersRepositoryMockRecorder struct {
	mock *MockOrdersRepository
}

// NewMockOrdersRepository creates a new mock instance.
func NewMockOrdersRepository(ctrl *gomock.Controller) *MockOrdersRepository {
	mock := &MockOrdersRepository{ctrl: ctrl}
	mock.recorder = &MockOrdersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersRepository) EXPECT() *MockOrdersRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrdersRepository) CreateOrder(ctx context.Context, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersRepositoryMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrdersRepository)(nil).CreateOrder), ctx, order)
}

// GetOrderForClient mocks base method.
func (m *MockOrdersRepository) GetOrderForClient(ctx context.Context, filter form.OrderGetForClient) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderForClient", ctx, filter)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderForClient indicates an expected call of GetOrderForClient.
func (mr *MockOrdersRepositoryMockRecorder) GetOrderForClient(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderForClient", reflect.TypeOf((*MockOrdersRepository)(nil).GetOrderForClient), ctx, filter)
}

// GetOrdersForClient mocks base method.
func (m *MockOrdersRepository) GetOrdersForClient(ctx context.Context, filter form.OrdersGetForClient) (entity.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForClient", ctx, filter)
	ret0, _ := ret[0].(entity.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForClient indicates an expected call of GetOrdersForClient.
func (mr *MockOrdersRepositoryMockRecorder) GetOrdersForClient(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForClient", reflect.TypeOf((*MockOrdersRepository)(nil).GetOrdersForClient), ctx, filter)
}

// MockTxStarter is a mock of TxStarter interface.
type MockTxStarter struct {
	ctrl     *gomock.Controller
	recorder *MockTxStarterMockRecorder
}

// MockTxStarterMockRecorder is the mock recorder for MockTxStarter.
type MockTxStarterMockRecorder struct {
	mock *MockTxStarter
}

// NewMockTxStarter creates a new mock instance.
func NewMockTxStarter(ctrl *gomock.Controller) *MockTxStarter {
	mock := &MockTxStarter{ctrl: ctrl}
	mock.recorder = &MockTxStarterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxStarter) EXPECT() *MockTxStarterMockRecorder {
	return m.recorder
}

// StartSession mocks base method.
func (m *MockTxStarter) StartSession(ctx context.Context) (context.Context, repository.TxCallback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(repository.TxCallback)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartSession indicates an expected call of StartSession.
func (mr *MockTxStarterMockRecorder) StartSession(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockTxStarter)(nil).StartSession), ctx)
}
