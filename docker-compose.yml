version: "3.9"

services:
  zookeeper:
    container_name: tmp-zookeeper
    image: zookeeper:3.7
    ports:
      - "2181:2181"
    restart: on-failure
    networks:
      - tmp-network

  servicemesh-mock-server:
    container_name: tmp-servicemesh-mock-server
    build:
      context: .
      dockerfile: cmd/mock-service-mesh/Dockerfile
    ports:
      - "9200:9200"
    environment:
      HTTP_LISTEN: 9200
    networks:
      - tmp-network

  kafka:
    container_name: tmp-kafka
    image: wurstmeister/kafka:2.13-2.8.1
    depends_on:
      - zookeeper
    ports:
      - "59092:59092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka:9092,OUTSIDE://localhost:59092
      - KAFKA_LISTENERS=INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:59092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    healthcheck:
      test: [ "CMD", "./opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "localhost:59092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    networks:
      - tmp-network

  cassandra:
    container_name: tmp-cassandra
    image: cassandra:3.11.13
    ports:
      - "9042:9042"
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
      interval: 15s
      timeout: 5s
      retries: 10
    networks:
      - tmp-network
  mongo:
    container_name: tmp-mongo
    image: mongo:6.0.8
    ports:
      - "27017:27017"
    volumes:
      - tmp-mongodata:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tmp-network

  prometheus:
    container_name: tmp-prometheus
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    networks:
      - tmp-network

  dragonfly:
    container_name: tmp-dragonfly
    image: docker.dragonflydb.io/dragonflydb/dragonfly:v1.6.1
    ulimits:
      memlock: -1
    ports:
      - "6379:6379"
    volumes:
      - tmp-cache:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tmp-network

  jaeger:
    container_name: tmp-jaeger
    image: jaegertracing/all-in-one:1.46
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14269:14269"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "9411:9411"
    environment:
      - LOG_LEVEL=debug
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    healthcheck:
      test: [ "CMD-SHELL", "wget -q -O- http://localhost:16686/ | grep -i jaeger" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - tmp-network

  service:
    container_name: tmp-service
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
      - "4000:4000"
      - "9090:9090"
    depends_on:
      servicemesh-mock-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
      jaeger:
        condition: service_healthy
      dragonfly:
        condition: service_healthy
    environment:
      SERVICE_MASH_HOST: servicemesh-mock-server
      SERVICE_MASH_PORT: 9200
      MONGO_CONTACT_POINTS: mongodb://mongo:27017
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      CACHE_ADDR: dragonfly:6379
      JAEGER_URL: "http://jaeger:14268/api/traces"
    networks:
      - tmp-network

  integration:
    container_name: tmp-integration
    build:
      context: .
      dockerfile: integration-test/Dockerfile
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - tmp-network

volumes:
  tmp-cache:
  tmp-mongodata:
networks:
  tmp-network:
    name: tmp-network
    external: false
